[{"name":"app.R","content":"library(shiny)\nlibrary(MASS)\nlibrary(shinythemes)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(scales)\nlibrary(ellipse)\n\nif (FALSE) library(munsell)\n\nui <- navbarPage(\"Multivariate Normality Assumption Dashboard\",\n  theme = shinytheme(\"flatly\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"distribution\", \"Select Distribution:\",\n                  choices = list(\"Normal\" = \"normal\",\n                                 \"Uniform\" = \"uniform\", \n                                 \"Exponential\" = \"exponential\"),\n                  selected = \"normal\"),\n      \n      sliderInput(\"sample_size\", \"Sample Size:\", \n                  value = 500, min = 50, max = 1000, step = 50),\n      \n      br(), br(),\n      \n      h4(\"Summary Statistics\"),\n      h5(\"Sample Size\"),\n      textOutput(\"sample_size_display\"),\n      br(),\n      h5(\"Mean Vector\"),\n      verbatimTextOutput(\"mean_vector\"),\n      br(),\n      h5(\"Covariance Matrix\"),\n      verbatimTextOutput(\"covariance_matrix\"),\n      br(),\n      h5(\"Contour Output\"),\n      tableOutput(\"contour_table\")\n    ),\n    \n    mainPanel(\n      fluidRow(\n        column(6,\n               h4(\"Contour Plot\"),\n               plotOutput(\"contour_plot\", height = \"400px\")\n        ),\n        column(6,\n               h4(\"Q-Q Plot\"),\n               plotOutput(\"qq_plot\", height = \"400px\")\n        )\n      ),\n      \n      br(),\n      \n      fluidRow(\n        column(12,\n               h4(\"Interpretation\"),\n               textOutput(\"interpretation\")\n        )\n      )\n    )\n  ),\n  footer = tags$footer(\n    style = \"\n      position: fixed;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      background-color: #f8f9fa;\n      border-top: 1px solid #ddd;\n      text-align: center;\n      padding: 8px;\n      font-size: 12px;\n      color: #6c757d;\n      z-index: 1000;\n    \",\n    \"2025 Created by Shahriar Shams and Issey Sone\"\n  )\n)\n\nserver <- function(input, output, session) {\n  \n  contour_level <- 0.5\n  \n  data_reactive <- reactive({\n    n <- input$sample_size\n    \n    if (input$distribution == \"normal\") {\n      mu <- c(0, 0)\n      Sigma <- matrix(c(3, 1, 1, 3), nrow = 2)\n      X <- as.data.frame(mvrnorm(n = n, mu = mu, Sigma = Sigma))\n      \n    } else {\n      if (input$distribution == \"uniform\") {\n        X <- data.frame(\n          x1 = runif(n, -3, 3),\n          x2 = runif(n, -3, 3)\n        )\n      } else if (input$distribution == \"exponential\") {\n        X <- data.frame(\n          x1 = rexp(n, rate = 0.5),\n          x2 = rexp(n, rate = 0.5)\n        )\n      }\n      \n      # Whitening and transformation to target covariance\n      X_centered <- scale(X, center = TRUE, scale = FALSE)\n      eig <- eigen(cov(X_centered))\n      D_inv_sqrt <- diag(1 / sqrt(eig$values))\n      X_whitened <- as.matrix(X_centered) %*% eig$vectors %*% D_inv_sqrt %*% t(eig$vectors)\n      \n      Sigma_target <- matrix(c(3, 1, 1, 3), nrow = 2)\n      eig_target <- eigen(Sigma_target)\n      D_target_sqrt <- diag(sqrt(eig_target$values))\n      X_transformed <- X_whitened %*% eig_target$vectors %*% D_target_sqrt %*% t(eig_target$vectors)\n      \n      X <- as.data.frame(X_transformed)\n    }\n    \n    colnames(X) <- c(\"x1\", \"x2\")\n    mu_hat <- colMeans(X)\n    Sigma_hat <- cov(X)\n    X$mahal_sq <- mahalanobis(X, center = mu_hat, cov = Sigma_hat)\n    \n    cutoff <- qchisq(contour_level, df = 2)\n    X$inside <- X$mahal_sq <= cutoff\n    \n    ellipse_data <- as.data.frame(ellipse(Sigma_hat, centre = mu_hat, level = contour_level))\n    colnames(ellipse_data) <- c(\"x1\", \"x2\")\n    \n    list(\n      data = X,\n      ellipse = ellipse_data,\n      mu_hat = mu_hat,\n      Sigma_hat = Sigma_hat,\n      distribution = input$distribution\n    )\n  })\n  \n  output$contour_plot <- renderPlot({\n    data_list <- data_reactive()\n    X <- data_list$data\n    ellipse_data <- data_list$ellipse\n    dist_name <- tools::toTitleCase(data_list$distribution)\n    \n    colors <- switch(data_list$distribution,\n                     \"normal\" = c(\"FALSE\" = \"darkblue\", \"TRUE\" = \"skyblue\"),\n                     \"uniform\" = c(\"FALSE\" = \"darkorchid\", \"TRUE\" = \"orchid1\"),\n                     \"exponential\" = c(\"FALSE\" = \"darkgreen\", \"TRUE\" = \"lightgreen\"))\n    \n    ggplot() +\n      geom_point(data = X, aes(x = x1, y = x2, color = inside), alpha = 0.7, size = 2) +\n      geom_path(data = ellipse_data, aes(x = x1, y = x2), color = \"black\", size = 1.2) +\n      scale_color_manual(values = colors,\n                         labels = c(paste0(\"Outside \", contour_level*100, \"%\"), \n                                    paste0(\"Inside \", contour_level*100, \"%\")),\n                         name = \"Location\") +\n      coord_fixed() +\n      labs(title = paste0(dist_name, \" Distribution with \", contour_level*100, \"% Contour\"),\n           subtitle = paste0(\"Proportion inside ellipse: \", round(mean(X$inside), 3)),\n           x = \"X1\", y = \"X2\") +\n      theme_minimal() +\n      theme(plot.title = element_text(size = 14, face = \"bold\"),\n            legend.position = \"bottom\")\n  })\n  \n  output$qq_plot <- renderPlot({\n    data_list <- data_reactive()\n    X <- data_list$data\n    sorted_mahal <- sort(X$mahal_sq)\n    theoretical <- qchisq(ppoints(length(sorted_mahal)), df = 2)\n    \n    point_color <- switch(data_list$distribution,\n                          \"normal\" = \"darkblue\",\n                          \"uniform\" = \"darkorchid\",\n                          \"exponential\" = \"darkgreen\")\n    \n    qqplot(theoretical, sorted_mahal,\n           main = \"Q-Q Plot: Mahalanobis Distances vs. Chi-Squared(2)\",\n           xlab = \"Theoretical Quantiles (Chi-Squared)\",\n           ylab = \"Sample Mahalanobis Distances Squared\",\n           pch = 16, col = point_color, cex = 0.8)\n    abline(0, 1, col = \"black\", lwd = 2)\n    grid()\n  })\n  \n  output$sample_size_display <- renderText({\n    paste(\"n =\", input$sample_size)\n  })\n  \n  output$mean_vector <- renderText({\n    mean_vec <- round(data_reactive()$mu_hat, 4)\n    paste0(\"μ̂ = (\", paste(mean_vec, collapse = \", \"), \")\")\n  })\n  \n  output$covariance_matrix <- renderText({\n    cov_mat <- round(data_reactive()$Sigma_hat, 4)\n    paste0(\"Σ̂ = \\n\",\n           sprintf(\"    [%8.4f  %8.4f]\\n\", cov_mat[1,1], cov_mat[1,2]),\n           sprintf(\"    [%8.4f  %8.4f]\", cov_mat[2,1], cov_mat[2,2]))\n  })\n  \n  output$contour_table <- renderTable({\n    X <- data_reactive()$data\n    data.frame(\n      Metric = c(\"Observed Proportion Inside\", \"Expected Proportion\"),\n      Value = c(round(mean(X$inside), 4), contour_level)\n    )\n  }, striped = TRUE, hover = TRUE)\n  \n  output$interpretation <- renderText({\n    X <- data_reactive()$data\n    prop_inside <- mean(X$inside)\n    expected <- contour_level\n    \n    if (data_reactive()$distribution == \"normal\") {\n      paste(\"Normal distribution: The points should follow the elliptical contour closely, and the Q-Q plot should show points near the diagonal line. The observed proportion (\", \n            round(prop_inside, 3), \") should be close to the expected (\", expected, \").\")\n    } else {\n      paste(\"Non-normal distribution: Notice how the points deviate from the expected pattern. The Q-Q plot shows systematic departures from the diagonal, and the observed proportion (\", \n            round(prop_inside, 3), \") may differ from the expected (\", expected, \"). This indicates violation of the normality assumption.\")\n    }\n  })\n}\n\nshinyApp(ui = ui, server = server)\n","type":"text"}]
